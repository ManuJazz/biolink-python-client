# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MartApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_mart_case_associations_resource(self, taxon, object_category, **kwargs):  # noqa: E501
        """Bulk download of case associations  # noqa: E501

        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_case_associations_resource(taxon, object_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: taxon of case, must be of form NCBITaxon:9606 (required)
        :param str object_category: Category of entity at link Subject (target), e.g. phenotype, disease (required)
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mart_case_associations_resource_with_http_info(taxon, object_category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mart_case_associations_resource_with_http_info(taxon, object_category, **kwargs)  # noqa: E501
            return data

    def get_mart_case_associations_resource_with_http_info(self, taxon, object_category, **kwargs):  # noqa: E501
        """Bulk download of case associations  # noqa: E501

        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_case_associations_resource_with_http_info(taxon, object_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: taxon of case, must be of form NCBITaxon:9606 (required)
        :param str object_category: Category of entity at link Subject (target), e.g. phenotype, disease (required)
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxon', 'object_category', 'slim']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mart_case_associations_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxon' is set
        if ('taxon' not in params or
                params['taxon'] is None):
            raise ValueError("Missing the required parameter `taxon` when calling `get_mart_case_associations_resource`")  # noqa: E501
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params or
                params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_mart_case_associations_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxon' in params:
            path_params['taxon'] = params['taxon']  # noqa: E501
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']  # noqa: E501

        query_params = []
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mart/case/{object_category}/{taxon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mart_disease_associations_resource(self, taxon, object_category, **kwargs):  # noqa: E501
        """Bulk download of disease associations  # noqa: E501

        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_disease_associations_resource(taxon, object_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: taxon of disease, must be of form NCBITaxon:9606 (required)
        :param str object_category: Category of entity at link Object (target), e.g. phenotype, disease (required)
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mart_disease_associations_resource_with_http_info(taxon, object_category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mart_disease_associations_resource_with_http_info(taxon, object_category, **kwargs)  # noqa: E501
            return data

    def get_mart_disease_associations_resource_with_http_info(self, taxon, object_category, **kwargs):  # noqa: E501
        """Bulk download of disease associations  # noqa: E501

        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_disease_associations_resource_with_http_info(taxon, object_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: taxon of disease, must be of form NCBITaxon:9606 (required)
        :param str object_category: Category of entity at link Object (target), e.g. phenotype, disease (required)
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxon', 'object_category', 'slim']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mart_disease_associations_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxon' is set
        if ('taxon' not in params or
                params['taxon'] is None):
            raise ValueError("Missing the required parameter `taxon` when calling `get_mart_disease_associations_resource`")  # noqa: E501
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params or
                params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_mart_disease_associations_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxon' in params:
            path_params['taxon'] = params['taxon']  # noqa: E501
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']  # noqa: E501

        query_params = []
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mart/disease/{object_category}/{taxon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mart_gene_associations_resource(self, taxon, object_category, **kwargs):  # noqa: E501
        """Bulk download of gene associations  # noqa: E501

        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_gene_associations_resource(taxon, object_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: taxon of gene, must be of form NCBITaxon:9606 (required)
        :param str object_category: Category of entity at link Object (target), e.g. phenotype, disease (required)
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mart_gene_associations_resource_with_http_info(taxon, object_category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mart_gene_associations_resource_with_http_info(taxon, object_category, **kwargs)  # noqa: E501
            return data

    def get_mart_gene_associations_resource_with_http_info(self, taxon, object_category, **kwargs):  # noqa: E501
        """Bulk download of gene associations  # noqa: E501

        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_gene_associations_resource_with_http_info(taxon, object_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: taxon of gene, must be of form NCBITaxon:9606 (required)
        :param str object_category: Category of entity at link Object (target), e.g. phenotype, disease (required)
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxon', 'object_category', 'slim']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mart_gene_associations_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxon' is set
        if ('taxon' not in params or
                params['taxon'] is None):
            raise ValueError("Missing the required parameter `taxon` when calling `get_mart_gene_associations_resource`")  # noqa: E501
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params or
                params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_mart_gene_associations_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxon' in params:
            path_params['taxon'] = params['taxon']  # noqa: E501
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']  # noqa: E501

        query_params = []
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mart/gene/{object_category}/{taxon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mart_ortholog_associations_resource(self, taxon2, taxon1, **kwargs):  # noqa: E501
        """Bulk download of orthologs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_ortholog_associations_resource(taxon2, taxon1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon2: object taxon, e.g. NCBITaxon:10090 (required)
        :param str taxon1: subject taxon, e.g. NCBITaxon:9606 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mart_ortholog_associations_resource_with_http_info(taxon2, taxon1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mart_ortholog_associations_resource_with_http_info(taxon2, taxon1, **kwargs)  # noqa: E501
            return data

    def get_mart_ortholog_associations_resource_with_http_info(self, taxon2, taxon1, **kwargs):  # noqa: E501
        """Bulk download of orthologs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_ortholog_associations_resource_with_http_info(taxon2, taxon1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon2: object taxon, e.g. NCBITaxon:10090 (required)
        :param str taxon1: subject taxon, e.g. NCBITaxon:9606 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxon2', 'taxon1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mart_ortholog_associations_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxon2' is set
        if ('taxon2' not in params or
                params['taxon2'] is None):
            raise ValueError("Missing the required parameter `taxon2` when calling `get_mart_ortholog_associations_resource`")  # noqa: E501
        # verify the required parameter 'taxon1' is set
        if ('taxon1' not in params or
                params['taxon1'] is None):
            raise ValueError("Missing the required parameter `taxon1` when calling `get_mart_ortholog_associations_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxon2' in params:
            path_params['taxon2'] = params['taxon2']  # noqa: E501
        if 'taxon1' in params:
            path_params['taxon1'] = params['taxon1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mart/ortholog/{taxon1}/{taxon2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mart_paralog_associations_resource(self, taxon2, taxon1, **kwargs):  # noqa: E501
        """Bulk download of paralogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_paralog_associations_resource(taxon2, taxon1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon2: object taxon, e.g. NCBITaxon:9606 (required)
        :param str taxon1: subject taxon, e.g. NCBITaxon:9606 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mart_paralog_associations_resource_with_http_info(taxon2, taxon1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mart_paralog_associations_resource_with_http_info(taxon2, taxon1, **kwargs)  # noqa: E501
            return data

    def get_mart_paralog_associations_resource_with_http_info(self, taxon2, taxon1, **kwargs):  # noqa: E501
        """Bulk download of paralogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mart_paralog_associations_resource_with_http_info(taxon2, taxon1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon2: object taxon, e.g. NCBITaxon:9606 (required)
        :param str taxon1: subject taxon, e.g. NCBITaxon:9606 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxon2', 'taxon1']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mart_paralog_associations_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxon2' is set
        if ('taxon2' not in params or
                params['taxon2'] is None):
            raise ValueError("Missing the required parameter `taxon2` when calling `get_mart_paralog_associations_resource`")  # noqa: E501
        # verify the required parameter 'taxon1' is set
        if ('taxon1' not in params or
                params['taxon1'] is None):
            raise ValueError("Missing the required parameter `taxon1` when calling `get_mart_paralog_associations_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxon2' in params:
            path_params['taxon2'] = params['taxon2']  # noqa: E501
        if 'taxon1' in params:
            path_params['taxon1'] = params['taxon1']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mart/paralog/{taxon1}/{taxon2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
