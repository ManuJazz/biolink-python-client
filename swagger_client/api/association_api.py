# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssociationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_association_by_subject_and_assoc_type(self, association_type, **kwargs):  # noqa: E501
        """Returns list of matching associations of a given type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_by_subject_and_assoc_type(association_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str association_type: Association type, eg gene_phenotype (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str subject: Subject CURIE
        :param str object: Object CURIE
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_association_by_subject_and_assoc_type_with_http_info(association_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_association_by_subject_and_assoc_type_with_http_info(association_type, **kwargs)  # noqa: E501
            return data

    def get_association_by_subject_and_assoc_type_with_http_info(self, association_type, **kwargs):  # noqa: E501
        """Returns list of matching associations of a given type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_by_subject_and_assoc_type_with_http_info(association_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str association_type: Association type, eg gene_phenotype (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str subject: Subject CURIE
        :param str object: Object CURIE
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['association_type', 'rows', 'start', 'evidence', 'unselect_evidence', 'exclude_automatic_assertions', 'use_compact_associations', 'subject', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_by_subject_and_assoc_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'association_type' is set
        if ('association_type' not in params or
                params['association_type'] is None):
            raise ValueError("Missing the required parameter `association_type` when calling `get_association_by_subject_and_assoc_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'association_type' in params:
            path_params['association_type'] = params['association_type']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501
        if 'object' in params:
            query_params.append(('object', params['object']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/type/{association_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_association_by_subject_and_object_category_search(self, object_category, subject_category, **kwargs):  # noqa: E501
        """Returns list of matching associations between a given subject and object category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_by_subject_and_object_category_search(object_category, subject_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_category: Category of entity at link Object (target), e.g. gene, disease, phenotype (required)
        :param str subject_category: Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str subject: Subject CURIE
        :param str object: Object CURIE
        :param str subject_taxon: Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default)
        :param str object_taxon: Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
        :param str relation: Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_association_by_subject_and_object_category_search_with_http_info(object_category, subject_category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_association_by_subject_and_object_category_search_with_http_info(object_category, subject_category, **kwargs)  # noqa: E501
            return data

    def get_association_by_subject_and_object_category_search_with_http_info(self, object_category, subject_category, **kwargs):  # noqa: E501
        """Returns list of matching associations between a given subject and object category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_by_subject_and_object_category_search_with_http_info(object_category, subject_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_category: Category of entity at link Object (target), e.g. gene, disease, phenotype (required)
        :param str subject_category: Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str subject: Subject CURIE
        :param str object: Object CURIE
        :param str subject_taxon: Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default)
        :param str object_taxon: Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
        :param str relation: Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_category', 'subject_category', 'rows', 'start', 'evidence', 'unselect_evidence', 'exclude_automatic_assertions', 'use_compact_associations', 'subject', 'object', 'subject_taxon', 'object_taxon', 'relation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_by_subject_and_object_category_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params or
                params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_association_by_subject_and_object_category_search`")  # noqa: E501
        # verify the required parameter 'subject_category' is set
        if ('subject_category' not in params or
                params['subject_category'] is None):
            raise ValueError("Missing the required parameter `subject_category` when calling `get_association_by_subject_and_object_category_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']  # noqa: E501
        if 'subject_category' in params:
            path_params['subject_category'] = params['subject_category']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501
        if 'object' in params:
            query_params.append(('object', params['object']))  # noqa: E501
        if 'subject_taxon' in params:
            query_params.append(('subject_taxon', params['subject_taxon']))  # noqa: E501
        if 'object_taxon' in params:
            query_params.append(('object_taxon', params['object_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/find/{subject_category}/{object_category}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_association_by_subject_category_search(self, subject_category, **kwargs):  # noqa: E501
        """Returns list of matching associations for a given subject category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_by_subject_category_search(subject_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject_category: Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str subject_taxon: Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default)
        :param str object_taxon: Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
        :param str relation: Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_association_by_subject_category_search_with_http_info(subject_category, **kwargs)  # noqa: E501
        else:
            (data) = self.get_association_by_subject_category_search_with_http_info(subject_category, **kwargs)  # noqa: E501
            return data

    def get_association_by_subject_category_search_with_http_info(self, subject_category, **kwargs):  # noqa: E501
        """Returns list of matching associations for a given subject category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_by_subject_category_search_with_http_info(subject_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject_category: Category of entity at link Subject (source), e.g. gene, disease, phenotype (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str subject_taxon: Subject taxon ID, e.g. NCBITaxon:9606 (Includes inferred associations, by default)
        :param str object_taxon: Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
        :param str relation: Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_category', 'rows', 'start', 'evidence', 'unselect_evidence', 'exclude_automatic_assertions', 'use_compact_associations', 'subject_taxon', 'object_taxon', 'relation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_by_subject_category_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_category' is set
        if ('subject_category' not in params or
                params['subject_category'] is None):
            raise ValueError("Missing the required parameter `subject_category` when calling `get_association_by_subject_category_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subject_category' in params:
            path_params['subject_category'] = params['subject_category']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'subject_taxon' in params:
            query_params.append(('subject_taxon', params['subject_taxon']))  # noqa: E501
        if 'object_taxon' in params:
            query_params.append(('object_taxon', params['object_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/find/{subject_category}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_association_object(self, id, **kwargs):  # noqa: E501
        """Returns the association with a given identifier  # noqa: E501

        An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_object(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4 (required)
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_association_object_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_association_object_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_association_object_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the association with a given identifier  # noqa: E501

        An association connects, at a minimum, two things, designated subject and object, via some relationship. Associations also include evidence, provenance etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_association_object_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: identifier for an association, e.g. f5ba436c-f851-41b3-9d9d-bb2b5fc879d4 (required)
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_association_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_association_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_associations_between(self, object, subject, **kwargs):  # noqa: E501
        """Returns associations connecting two entities  # noqa: E501

        Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associations_between(object, subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object: Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene (required)
        :param str subject: Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_associations_between_with_http_info(object, subject, **kwargs)  # noqa: E501
        else:
            (data) = self.get_associations_between_with_http_info(object, subject, **kwargs)  # noqa: E501
            return data

    def get_associations_between_with_http_info(self, object, subject, **kwargs):  # noqa: E501
        """Returns associations connecting two entities  # noqa: E501

        Given two entities (e.g. a particular gene and a particular disease), if these two entities are connected (directly or indirectly), then return the association objects describing the connection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associations_between_with_http_info(object, subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object: Return associations pointing to this node, e.g. MP:0013765. Can also be a biological entity such as a gene (required)
        :param str subject: Return associations emanating from this node, e.g. MGI:1342287 (If ID is from an ontology then results would include inferred associations, by default) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object', 'subject', 'rows', 'start', 'evidence', 'unselect_evidence', 'exclude_automatic_assertions', 'use_compact_associations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_between" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `get_associations_between`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `get_associations_between`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object' in params:
            path_params['object'] = params['object']  # noqa: E501
        if 'subject' in params:
            path_params['subject'] = params['subject']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/between/{subject}/{object}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_associations_from(self, subject, **kwargs):  # noqa: E501
        """Returns list of matching associations starting from a given subject (source)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associations_from(subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str object_taxon: Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
        :param str relation: Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_associations_from_with_http_info(subject, **kwargs)  # noqa: E501
        else:
            (data) = self.get_associations_from_with_http_info(subject, **kwargs)  # noqa: E501
            return data

    def get_associations_from_with_http_info(self, subject, **kwargs):  # noqa: E501
        """Returns list of matching associations starting from a given subject (source)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associations_from_with_http_info(subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: Return associations emanating from this node, e.g. NCBIGene:84570, ZFIN:ZDB-GENE-050417-357 (If ID is from an ontology then results would include inferred associations, by default) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param str object_taxon: Object taxon ID, e.g. NCBITaxon:10090 (Includes inferred associations, by default)
        :param str relation: Filter by relation CURIE, e.g. RO:0002200 (has_phenotype), RO:0002607 (is marker for), RO:HOM0000017 (orthologous to), etc.
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject', 'rows', 'start', 'evidence', 'unselect_evidence', 'exclude_automatic_assertions', 'use_compact_associations', 'object_taxon', 'relation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_from" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `get_associations_from`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subject' in params:
            path_params['subject'] = params['subject']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'object_taxon' in params:
            query_params.append(('object_taxon', params['object_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/from/{subject}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_associations_to(self, object, **kwargs):  # noqa: E501
        """Returns list of matching associations pointing to a given object (target)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associations_to(object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object: Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_associations_to_with_http_info(object, **kwargs)  # noqa: E501
        else:
            (data) = self.get_associations_to_with_http_info(object, **kwargs)  # noqa: E501
            return data

    def get_associations_to_with_http_info(self, object, **kwargs):  # noqa: E501
        """Returns list of matching associations pointing to a given object (target)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associations_to_with_http_info(object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object: Return associations pointing to this node, e.g. specifying MP:0013765 will return all genes, variants, strains, etc. annotated with this term. Can also be a biological entity such as a gene (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool use_compact_associations: If true, returns results in compact associations format
        :return: list[AssociationResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object', 'rows', 'start', 'evidence', 'unselect_evidence', 'exclude_automatic_assertions', 'use_compact_associations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `get_associations_to`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object' in params:
            path_params['object'] = params['object']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/association/to/{object}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociationResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
