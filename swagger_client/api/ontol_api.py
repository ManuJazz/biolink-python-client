# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OntolApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_extract_ontology_subgraph_resource(self, node, ontology, **kwargs):  # noqa: E501
        """Extract a subgraph from an ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extract_ontology_subgraph_resource(node, ontology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node: class ID, e.g. HP:0001288 (required)
        :param str ontology: ontology ID, e.g. go, uberon, mp, hp (required)
        :param list[str] cnode: Additional classes
        :param bool include_ancestors: Include Ancestors
        :param bool include_descendants: Include Descendants
        :param list[str] relation: Additional classes
        :param bool include_meta: Include metadata in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_extract_ontology_subgraph_resource_with_http_info(node, ontology, **kwargs)  # noqa: E501
        else:
            (data) = self.get_extract_ontology_subgraph_resource_with_http_info(node, ontology, **kwargs)  # noqa: E501
            return data

    def get_extract_ontology_subgraph_resource_with_http_info(self, node, ontology, **kwargs):  # noqa: E501
        """Extract a subgraph from an ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_extract_ontology_subgraph_resource_with_http_info(node, ontology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node: class ID, e.g. HP:0001288 (required)
        :param str ontology: ontology ID, e.g. go, uberon, mp, hp (required)
        :param list[str] cnode: Additional classes
        :param bool include_ancestors: Include Ancestors
        :param bool include_descendants: Include Descendants
        :param list[str] relation: Additional classes
        :param bool include_meta: Include metadata in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node', 'ontology', 'cnode', 'include_ancestors', 'include_descendants', 'relation', 'include_meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_extract_ontology_subgraph_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `get_extract_ontology_subgraph_resource`")  # noqa: E501
        # verify the required parameter 'ontology' is set
        if ('ontology' not in params or
                params['ontology'] is None):
            raise ValueError("Missing the required parameter `ontology` when calling `get_extract_ontology_subgraph_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node' in params:
            path_params['node'] = params['node']  # noqa: E501
        if 'ontology' in params:
            path_params['ontology'] = params['ontology']  # noqa: E501

        query_params = []
        if 'cnode' in params:
            query_params.append(('cnode', params['cnode']))  # noqa: E501
            collection_formats['cnode'] = 'multi'  # noqa: E501
        if 'include_ancestors' in params:
            query_params.append(('include_ancestors', params['include_ancestors']))  # noqa: E501
        if 'include_descendants' in params:
            query_params.append(('include_descendants', params['include_descendants']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
            collection_formats['relation'] = 'multi'  # noqa: E501
        if 'include_meta' in params:
            query_params.append(('include_meta', params['include_meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontol/subgraph/{ontology}/{node}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_information_content_resource(self, subject_category, object_category, subject_taxon, **kwargs):  # noqa: E501
        """Returns information content (IC) for a set of relevant ontology classes  # noqa: E501

        ``` IC = -log2( freq(t) / popSize ) ```  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_information_content_resource(subject_category, object_category, subject_taxon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject_category: (required)
        :param str object_category: (required)
        :param str subject_taxon: (required)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_information_content_resource_with_http_info(subject_category, object_category, subject_taxon, **kwargs)  # noqa: E501
        else:
            (data) = self.get_information_content_resource_with_http_info(subject_category, object_category, subject_taxon, **kwargs)  # noqa: E501
            return data

    def get_information_content_resource_with_http_info(self, subject_category, object_category, subject_taxon, **kwargs):  # noqa: E501
        """Returns information content (IC) for a set of relevant ontology classes  # noqa: E501

        ``` IC = -log2( freq(t) / popSize ) ```  Here the frequency and population is calculated for a particular dataset: e.g. all human disease-phenotype associations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_information_content_resource_with_http_info(subject_category, object_category, subject_taxon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject_category: (required)
        :param str object_category: (required)
        :param str subject_taxon: (required)
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default)                     or a specific publication or other supporting ibject, e.g. ZFIN:ZDB-PUB-060503-2.                     
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_category', 'object_category', 'subject_taxon', 'evidence']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_information_content_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_category' is set
        if ('subject_category' not in params or
                params['subject_category'] is None):
            raise ValueError("Missing the required parameter `subject_category` when calling `get_information_content_resource`")  # noqa: E501
        # verify the required parameter 'object_category' is set
        if ('object_category' not in params or
                params['object_category'] is None):
            raise ValueError("Missing the required parameter `object_category` when calling `get_information_content_resource`")  # noqa: E501
        # verify the required parameter 'subject_taxon' is set
        if ('subject_taxon' not in params or
                params['subject_taxon'] is None):
            raise ValueError("Missing the required parameter `subject_taxon` when calling `get_information_content_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subject_category' in params:
            path_params['subject_category'] = params['subject_category']  # noqa: E501
        if 'object_category' in params:
            path_params['object_category'] = params['object_category']  # noqa: E501
        if 'subject_taxon' in params:
            path_params['subject_taxon'] = params['subject_taxon']  # noqa: E501

        query_params = []
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontol/information_content/{subject_category}/{object_category}/{subject_taxon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_extract_ontology_subgraph_resource(self, node, ontology, **kwargs):  # noqa: E501
        """Extract a subgraph from an ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_extract_ontology_subgraph_resource(node, ontology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node: class ID, e.g. HP:0001288 (required)
        :param str ontology: ontology ID, e.g. go, uberon, mp, hp (required)
        :param list[str] cnode: Additional classes
        :param bool include_ancestors: Include Ancestors
        :param bool include_descendants: Include Descendants
        :param list[str] relation: Additional classes
        :param bool include_meta: Include metadata in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_extract_ontology_subgraph_resource_with_http_info(node, ontology, **kwargs)  # noqa: E501
        else:
            (data) = self.post_extract_ontology_subgraph_resource_with_http_info(node, ontology, **kwargs)  # noqa: E501
            return data

    def post_extract_ontology_subgraph_resource_with_http_info(self, node, ontology, **kwargs):  # noqa: E501
        """Extract a subgraph from an ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_extract_ontology_subgraph_resource_with_http_info(node, ontology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node: class ID, e.g. HP:0001288 (required)
        :param str ontology: ontology ID, e.g. go, uberon, mp, hp (required)
        :param list[str] cnode: Additional classes
        :param bool include_ancestors: Include Ancestors
        :param bool include_descendants: Include Descendants
        :param list[str] relation: Additional classes
        :param bool include_meta: Include metadata in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node', 'ontology', 'cnode', 'include_ancestors', 'include_descendants', 'relation', 'include_meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_extract_ontology_subgraph_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `post_extract_ontology_subgraph_resource`")  # noqa: E501
        # verify the required parameter 'ontology' is set
        if ('ontology' not in params or
                params['ontology'] is None):
            raise ValueError("Missing the required parameter `ontology` when calling `post_extract_ontology_subgraph_resource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node' in params:
            path_params['node'] = params['node']  # noqa: E501
        if 'ontology' in params:
            path_params['ontology'] = params['ontology']  # noqa: E501

        query_params = []
        if 'cnode' in params:
            query_params.append(('cnode', params['cnode']))  # noqa: E501
            collection_formats['cnode'] = 'multi'  # noqa: E501
        if 'include_ancestors' in params:
            query_params.append(('include_ancestors', params['include_ancestors']))  # noqa: E501
        if 'include_descendants' in params:
            query_params.append(('include_descendants', params['include_descendants']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
            collection_formats['relation'] = 'multi'  # noqa: E501
        if 'include_meta' in params:
            query_params.append(('include_meta', params['include_meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontol/subgraph/{ontology}/{node}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
