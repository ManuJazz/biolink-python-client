# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SimApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_annotation_score(self, **kwargs):  # noqa: E501
        """Get annotation score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotation_score(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: Phenotype identifier (eg HP:0004935)
        :param list[str] absent_id: absent phenotype (eg HP:0002828)
        :return: SufficiencyOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_annotation_score_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_annotation_score_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_annotation_score_with_http_info(self, **kwargs):  # noqa: E501
        """Get annotation score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotation_score_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] id: Phenotype identifier (eg HP:0004935)
        :param list[str] absent_id: absent phenotype (eg HP:0002828)
        :return: SufficiencyOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'absent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_annotation_score" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'absent_id' in params:
            query_params.append(('absent_id', params['absent_id']))  # noqa: E501
            collection_formats['absent_id'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sim/score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SufficiencyOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sim_compare(self, **kwargs):  # noqa: E501
        """Compare a reference profile vs one profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sim_compare(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_feature_set: set to true if *all* input ids are phenotypic features, else set to false
        :param str metric: Metric for computing similarity
        :param list[str] ref_id: A phenotype or identifier that is composed of phenotypes (eg disease, gene)
        :param list[str] query_id: A phenotype or identifier that is composed of phenotypes (eg disease, gene)
        :return: SimResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sim_compare_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sim_compare_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sim_compare_with_http_info(self, **kwargs):  # noqa: E501
        """Compare a reference profile vs one profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sim_compare_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_feature_set: set to true if *all* input ids are phenotypic features, else set to false
        :param str metric: Metric for computing similarity
        :param list[str] ref_id: A phenotype or identifier that is composed of phenotypes (eg disease, gene)
        :param list[str] query_id: A phenotype or identifier that is composed of phenotypes (eg disease, gene)
        :return: SimResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_feature_set', 'metric', 'ref_id', 'query_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sim_compare" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_feature_set' in params:
            query_params.append(('is_feature_set', params['is_feature_set']))  # noqa: E501
        if 'metric' in params:
            query_params.append(('metric', params['metric']))  # noqa: E501
        if 'ref_id' in params:
            query_params.append(('ref_id', params['ref_id']))  # noqa: E501
            collection_formats['ref_id'] = 'multi'  # noqa: E501
        if 'query_id' in params:
            query_params.append(('query_id', params['query_id']))  # noqa: E501
            collection_formats['query_id'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sim/compare', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sim_search(self, **kwargs):  # noqa: E501
        """Search for phenotypically similar diseases or model genes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sim_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_feature_set: set to true if *all* input ids are phenotypic features, else set to false
        :param str metric: Metric for computing similarity
        :param list[str] id: A phenotype or identifier that is composed of phenotypes (eg disease, gene)
        :param int limit: number of rows, max 500
        :param str taxon: ncbi taxon id
        :return: SimResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sim_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sim_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sim_search_with_http_info(self, **kwargs):  # noqa: E501
        """Search for phenotypically similar diseases or model genes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sim_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_feature_set: set to true if *all* input ids are phenotypic features, else set to false
        :param str metric: Metric for computing similarity
        :param list[str] id: A phenotype or identifier that is composed of phenotypes (eg disease, gene)
        :param int limit: number of rows, max 500
        :param str taxon: ncbi taxon id
        :return: SimResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_feature_set', 'metric', 'id', 'limit', 'taxon']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sim_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_feature_set' in params:
            query_params.append(('is_feature_set', params['is_feature_set']))  # noqa: E501
        if 'metric' in params:
            query_params.append(('metric', params['metric']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sim/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_annotation_score(self, body, **kwargs):  # noqa: E501
        """Get annotation score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_annotation_score(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SufficiencyPostInput body: (required)
        :return: SufficiencyOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_annotation_score_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_annotation_score_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_annotation_score_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get annotation score  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_annotation_score_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SufficiencyPostInput body: (required)
        :return: SufficiencyOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_annotation_score" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_annotation_score`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sim/score', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SufficiencyOutput',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sim_compare(self, body, **kwargs):  # noqa: E501
        """Compare a reference profile vs one or more profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sim_compare(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompareInput body: (required)
        :return: SimResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sim_compare_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sim_compare_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_sim_compare_with_http_info(self, body, **kwargs):  # noqa: E501
        """Compare a reference profile vs one or more profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sim_compare_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompareInput body: (required)
        :return: SimResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sim_compare" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_sim_compare`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sim/compare', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
