# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_autocomplete(self, term, **kwargs):  # noqa: E501
        """Returns list of matching concepts or entities using lexical search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete(term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: (required)
        :param list[str] fq: fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior.
        :param list[str] category: e.g. gene, disease
        :param list[str] prefix: ontology prefix: HP, -MONDO
        :param bool include_eqs: Include equivalent ids in prefix filter
        :param list[str] boost_fx: boost function e.g. pow(edges,0.334)
        :param list[str] boost_q: boost query e.g. category:genotype^-10
        :param list[str] taxon: taxon filter, eg NCBITaxon:9606, includes inferred taxa
        :param int rows: number of rows
        :param str start: row number to start from
        :param str highlight_class: highlight class
        :param str min_match: minimum should match parameter, see solr docs for details
        :param bool exclude_groups: Exclude grouping classes (classes with subclasses)
        :param bool minimal_tokenizer: set to true to use the minimal tokenizer, good for variants and genotypes
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_autocomplete_with_http_info(term, **kwargs)  # noqa: E501
        else:
            (data) = self.get_autocomplete_with_http_info(term, **kwargs)  # noqa: E501
            return data

    def get_autocomplete_with_http_info(self, term, **kwargs):  # noqa: E501
        """Returns list of matching concepts or entities using lexical search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_with_http_info(term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: (required)
        :param list[str] fq: fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior.
        :param list[str] category: e.g. gene, disease
        :param list[str] prefix: ontology prefix: HP, -MONDO
        :param bool include_eqs: Include equivalent ids in prefix filter
        :param list[str] boost_fx: boost function e.g. pow(edges,0.334)
        :param list[str] boost_q: boost query e.g. category:genotype^-10
        :param list[str] taxon: taxon filter, eg NCBITaxon:9606, includes inferred taxa
        :param int rows: number of rows
        :param str start: row number to start from
        :param str highlight_class: highlight class
        :param str min_match: minimum should match parameter, see solr docs for details
        :param bool exclude_groups: Exclude grouping classes (classes with subclasses)
        :param bool minimal_tokenizer: set to true to use the minimal tokenizer, good for variants and genotypes
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term', 'fq', 'category', 'prefix', 'include_eqs', 'boost_fx', 'boost_q', 'taxon', 'rows', 'start', 'highlight_class', 'min_match', 'exclude_groups', 'minimal_tokenizer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `get_autocomplete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term' in params:
            path_params['term'] = params['term']  # noqa: E501

        query_params = []
        if 'fq' in params:
            query_params.append(('fq', params['fq']))  # noqa: E501
            collection_formats['fq'] = 'multi'  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
            collection_formats['category'] = 'multi'  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
            collection_formats['prefix'] = 'multi'  # noqa: E501
        if 'include_eqs' in params:
            query_params.append(('include_eqs', params['include_eqs']))  # noqa: E501
        if 'boost_fx' in params:
            query_params.append(('boost_fx', params['boost_fx']))  # noqa: E501
            collection_formats['boost_fx'] = 'multi'  # noqa: E501
        if 'boost_q' in params:
            query_params.append(('boost_q', params['boost_q']))  # noqa: E501
            collection_formats['boost_q'] = 'multi'  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'highlight_class' in params:
            query_params.append(('highlight_class', params['highlight_class']))  # noqa: E501
        if 'min_match' in params:
            query_params.append(('min_match', params['min_match']))  # noqa: E501
        if 'exclude_groups' in params:
            query_params.append(('exclude_groups', params['exclude_groups']))  # noqa: E501
        if 'minimal_tokenizer' in params:
            query_params.append(('minimal_tokenizer', params['minimal_tokenizer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/entity/autocomplete/{term}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutocompleteResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_entities(self, term, **kwargs):  # noqa: E501
        """Returns list of matching concepts or entities using lexical search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_entities(term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: search string, e.g. shh, parkinson, femur (required)
        :param list[str] fq: fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior.
        :param list[str] category: e.g. gene, disease
        :param list[str] prefix: ontology prefix: HP, -MONDO
        :param bool include_eqs: Include equivalent ids in prefix filter
        :param list[str] boost_fx: boost function e.g. pow(edges,0.334)
        :param list[str] boost_q: boost query e.g. category:genotype^-10
        :param list[str] taxon: taxon filter, eg NCBITaxon:9606, includes inferred taxa
        :param int rows: number of rows
        :param str start: row number to start from
        :param str highlight_class: highlight class
        :param str min_match: minimum should match parameter, see solr docs for details
        :param bool exclude_groups: Exclude grouping classes (classes with subclasses)
        :param bool minimal_tokenizer: set to true to use the minimal tokenizer, good for variants and genotypes
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_entities_with_http_info(term, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_entities_with_http_info(term, **kwargs)  # noqa: E501
            return data

    def get_search_entities_with_http_info(self, term, **kwargs):  # noqa: E501
        """Returns list of matching concepts or entities using lexical search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_entities_with_http_info(term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: search string, e.g. shh, parkinson, femur (required)
        :param list[str] fq: fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior.
        :param list[str] category: e.g. gene, disease
        :param list[str] prefix: ontology prefix: HP, -MONDO
        :param bool include_eqs: Include equivalent ids in prefix filter
        :param list[str] boost_fx: boost function e.g. pow(edges,0.334)
        :param list[str] boost_q: boost query e.g. category:genotype^-10
        :param list[str] taxon: taxon filter, eg NCBITaxon:9606, includes inferred taxa
        :param int rows: number of rows
        :param str start: row number to start from
        :param str highlight_class: highlight class
        :param str min_match: minimum should match parameter, see solr docs for details
        :param bool exclude_groups: Exclude grouping classes (classes with subclasses)
        :param bool minimal_tokenizer: set to true to use the minimal tokenizer, good for variants and genotypes
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term', 'fq', 'category', 'prefix', 'include_eqs', 'boost_fx', 'boost_q', 'taxon', 'rows', 'start', 'highlight_class', 'min_match', 'exclude_groups', 'minimal_tokenizer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `get_search_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term' in params:
            path_params['term'] = params['term']  # noqa: E501

        query_params = []
        if 'fq' in params:
            query_params.append(('fq', params['fq']))  # noqa: E501
            collection_formats['fq'] = 'multi'  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
            collection_formats['category'] = 'multi'  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
            collection_formats['prefix'] = 'multi'  # noqa: E501
        if 'include_eqs' in params:
            query_params.append(('include_eqs', params['include_eqs']))  # noqa: E501
        if 'boost_fx' in params:
            query_params.append(('boost_fx', params['boost_fx']))  # noqa: E501
            collection_formats['boost_fx'] = 'multi'  # noqa: E501
        if 'boost_q' in params:
            query_params.append(('boost_q', params['boost_q']))  # noqa: E501
            collection_formats['boost_q'] = 'multi'  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'highlight_class' in params:
            query_params.append(('highlight_class', params['highlight_class']))  # noqa: E501
        if 'min_match' in params:
            query_params.append(('min_match', params['min_match']))  # noqa: E501
        if 'exclude_groups' in params:
            query_params.append(('exclude_groups', params['exclude_groups']))  # noqa: E501
        if 'minimal_tokenizer' in params:
            query_params.append(('minimal_tokenizer', params['minimal_tokenizer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/entity/{term}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_hpo_entities(self, term, **kwargs):  # noqa: E501
        """Returns list of matching concepts or entities using lexical search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_hpo_entities(term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: search string, e.g. muscle atrophy, frequent infections (required)
        :param int rows: number of rows
        :param str start: row number to start from
        :param str phenotype_group: phenotype group id
        :param str phenotype_group_label: phenotype group label
        :param str anatomical_system: anatomical system id
        :param str anatomical_system_label: anatomical system label
        :param str highlight_class: highlight class
        :return: LayResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_hpo_entities_with_http_info(term, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_hpo_entities_with_http_info(term, **kwargs)  # noqa: E501
            return data

    def get_search_hpo_entities_with_http_info(self, term, **kwargs):  # noqa: E501
        """Returns list of matching concepts or entities using lexical search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_hpo_entities_with_http_info(term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str term: search string, e.g. muscle atrophy, frequent infections (required)
        :param int rows: number of rows
        :param str start: row number to start from
        :param str phenotype_group: phenotype group id
        :param str phenotype_group_label: phenotype group label
        :param str anatomical_system: anatomical system id
        :param str anatomical_system_label: anatomical system label
        :param str highlight_class: highlight class
        :return: LayResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['term', 'rows', 'start', 'phenotype_group', 'phenotype_group_label', 'anatomical_system', 'anatomical_system_label', 'highlight_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_hpo_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'term' is set
        if ('term' not in params or
                params['term'] is None):
            raise ValueError("Missing the required parameter `term` when calling `get_search_hpo_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'term' in params:
            path_params['term'] = params['term']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'phenotype_group' in params:
            query_params.append(('phenotype_group', params['phenotype_group']))  # noqa: E501
        if 'phenotype_group_label' in params:
            query_params.append(('phenotype_group_label', params['phenotype_group_label']))  # noqa: E501
        if 'anatomical_system' in params:
            query_params.append(('anatomical_system', params['anatomical_system']))  # noqa: E501
        if 'anatomical_system_label' in params:
            query_params.append(('anatomical_system_label', params['anatomical_system_label']))  # noqa: E501
        if 'highlight_class' in params:
            query_params.append(('highlight_class', params['highlight_class']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/entity/hpo-pl/{term}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
