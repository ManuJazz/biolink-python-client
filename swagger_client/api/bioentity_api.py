# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BioentityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_anatomy_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a given anatomy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anatomy_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_anatomy_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_anatomy_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_anatomy_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a given anatomy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anatomy_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anatomy_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_anatomy_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/anatomy/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_anatomy_gene_by_taxon_associations(self, taxid, id, **kwargs):  # noqa: E501
        """Returns gene IDs for all genes associated with a given anatomy, filtered by taxon  # noqa: E501

        For example, + NCBITaxon:10090 (mouse)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anatomy_gene_by_taxon_associations(taxid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxid: Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
        :param str id: CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_anatomy_gene_by_taxon_associations_with_http_info(taxid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_anatomy_gene_by_taxon_associations_with_http_info(taxid, id, **kwargs)  # noqa: E501
            return data

    def get_anatomy_gene_by_taxon_associations_with_http_info(self, taxid, id, **kwargs):  # noqa: E501
        """Returns gene IDs for all genes associated with a given anatomy, filtered by taxon  # noqa: E501

        For example, + NCBITaxon:10090 (mouse)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anatomy_gene_by_taxon_associations_with_http_info(taxid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxid: Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
        :param str id: CURIE identifier of anatomical entity, e.g. GO:0005634 (nucleus), UBERON:0002037 (cerebellum), CL:0000540 (neuron). Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxid', 'id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anatomy_gene_by_taxon_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxid' is set
        if ('taxid' not in params or
                params['taxid'] is None):
            raise ValueError("Missing the required parameter `taxid` when calling `get_anatomy_gene_by_taxon_associations`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_anatomy_gene_by_taxon_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxid' in params:
            path_params['taxid'] = params['taxid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/anatomy/{id}/genes/{taxid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_case_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_case_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_case_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_case_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_case_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_case_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/case/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_case_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_case_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_case_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_case_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_case_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_case_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/case/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_case_model_associations(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_model_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_case_model_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_case_model_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_case_model_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_model_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_case_model_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_case_model_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/case/{id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_case_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_case_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_case_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_case_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_case_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_case_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/case/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_case_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_case_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_case_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_case_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a case  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a case (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_case_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_case_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/case/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_case_associations(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_case_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_case_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_case_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_case_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_case_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. MONDO:0007103, MONDO:0010918. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_case_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_case_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :param str association_type: Additional filters: causal, non_causal, both
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :param str association_type: Additional filters: causal, non_causal, both
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q', 'association_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'association_type' in params:
            query_params.append(('association_type', params['association_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. Orphanet:399158, DOID:0080008. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_model_associations(self, id, **kwargs):  # noqa: E501
        """Returns associations to models of the disease  # noqa: E501

        In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_model_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_model_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_model_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_model_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns associations to models of the disease  # noqa: E501

        In the association object returned, the subject will be the disease, and the object will be the model. The model may be a gene or genetic element.  If the query disease is a general class, the association subject may be to a specific disease.  In some cases the association will be *direct*, for example if a paper asserts a genotype is a model of a disease.  In other cases, the association will be *indirect*, for example, chaining over orthology. In these cases the chain will be reflected in the *evidence graph*  * TODO: provide hook into owlsim for dynamic computation of models by similarity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_model_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_model_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_model_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_model_taxon_associations(self, taxon, id, **kwargs):  # noqa: E501
        """Returns associations to models of the disease constrained by taxon  # noqa: E501

        See /disease/<id>/models route for full details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_model_taxon_associations(taxon, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used (required)
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_model_taxon_associations_with_http_info(taxon, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_model_taxon_associations_with_http_info(taxon, id, **kwargs)  # noqa: E501
            return data

    def get_disease_model_taxon_associations_with_http_info(self, taxon, id, **kwargs):  # noqa: E501
        """Returns associations to models of the disease constrained by taxon  # noqa: E501

        See /disease/<id>/models route for full details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_model_taxon_associations_with_http_info(taxon, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxon: CURIE of organism taxonomy class to constrain models, e.g NCBITaxon:10090 (M. musculus).   Higher level taxa may be used (required)
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxon', 'id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_model_taxon_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxon' is set
        if ('taxon' not in params or
                params['taxon'] is None):
            raise ValueError("Missing the required parameter `taxon` when calling `get_disease_model_taxon_associations`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_model_taxon_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxon' in params:
            path_params['taxon'] = params['taxon']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/models/{taxon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_pathway_associations(self, id, **kwargs):  # noqa: E501
        """Returns pathways associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_pathway_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_pathway_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_pathway_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_pathway_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns pathways associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_pathway_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. DOID:4450. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_pathway_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_pathway_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/pathways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: D2PAssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, Orphanet:1934, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: D2PAssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='D2PAssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_substance_associations(self, id, **kwargs):  # noqa: E501
        """Returns substances associated with a disease  # noqa: E501

        e.g. drugs or small molecules used to treat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_substance_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_substance_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_substance_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_substance_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns substances associated with a disease  # noqa: E501

        e.g. drugs or small molecules used to treat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_substance_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. DOID:2841 (asthma). Equivalent IDs not yet supported (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_substance_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_substance_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/treatment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disease_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_disease_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disease_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_disease_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a disease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_disease_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of disease, e.g. OMIM:605543, DOID:678. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disease_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_disease_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/disease/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_function_associations(self, id, **kwargs):  # noqa: E501
        """Returns annotations associated to a function term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a function term (e.g. GO:0044598) (required)
        :param int start: beginning row
        :param int rows: number of rows
        :param list[str] evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_function_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_function_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_function_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns annotations associated to a function term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a function term (e.g. GO:0044598) (required)
        :param int start: beginning row
        :param int rows: number of rows
        :param list[str] evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start', 'rows', 'evidence']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_function_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_function_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
            collection_formats['evidence'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/function/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_function_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated to a GO term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :param str relationship_type: relationship type ('involved_in', 'involved_in_regulation_of' or 'acts_upstream_of_or_within')
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_function_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_function_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_function_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated to a GO term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :param str relationship_type: relationship type ('involved_in', 'involved_in_regulation_of' or 'acts_upstream_of_or_within')
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q', 'relationship_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_function_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_function_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'relationship_type' in params:
            query_params.append(('relationship_type', params['relationship_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/function/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_function_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated to a GO term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int start: beginning row
        :param int rows: number of rows
        :param list[str] evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_function_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_function_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_function_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated to a GO term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int start: beginning row
        :param int rows: number of rows
        :param list[str] evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start', 'rows', 'evidence']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_function_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_function_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
            collection_formats['evidence'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/function/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_function_taxon_associations(self, id, **kwargs):  # noqa: E501
        """Returns taxons associated to a GO term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_taxon_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int start: beginning row
        :param int rows: number of rows
        :param list[str] evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_function_taxon_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_function_taxon_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_function_taxon_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns taxons associated to a GO term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_taxon_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int start: beginning row
        :param int rows: number of rows
        :param list[str] evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start', 'rows', 'evidence']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_function_taxon_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_function_taxon_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
            collection_formats['evidence'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/function/{id}/taxons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_anatomy_associations(self, id, **kwargs):  # noqa: E501
        """Returns anatomical entities associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_anatomy_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:13434 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_anatomy_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_anatomy_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_anatomy_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns anatomical entities associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_anatomy_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:13434 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_anatomy_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_anatomy_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/anatomy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_case_associations(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_case_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. HGNC:613, HGNC:11025 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_case_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_case_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_case_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_case_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. HGNC:613, HGNC:11025 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_case_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_case_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :param str association_type: Additional filters: causal, non_causal, both
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :param str association_type: Additional filters: causal, non_causal, both
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q', 'association_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'association_type' in params:
            query_params.append(('association_type', params['association_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_expression_associations(self, id, **kwargs):  # noqa: E501
        """Returns expression events for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_expression_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_expression_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_expression_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_expression_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns expression events for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_expression_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_expression_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_expression_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/expression/anatomy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_function_associations(self, id, **kwargs):  # noqa: E501
        """Returns function associations for a gene  # noqa: E501

        IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_function_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_function_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_function_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_function_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns function associations for a gene  # noqa: E501

        IMPLEMENTATION DETAILS ----------------------  Note: currently this is implemented as a query to the GO/AmiGO solr instance. This directly supports IDs such as:   - ZFIN e.g. ZFIN:ZDB-GENE-050417-357  Note that the AmiGO GOlr natively stores MGI annotations to MGI:MGI:nn. However, the standard for biolink is MGI:nnnn, so you should use this (will be transparently mapped to legacy ID)  Additionally, for some species such as Human, GO has the annotation attached to the UniProt ID. Again, this should be transparently handled; e.g. you can use NCBIGene:6469, and this will be mapped behind the scenes for querying.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_function_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:6469. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_function_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_function_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/function', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. ZFIN:ZDB-GENE-980526-166 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_homolog_associations(self, id, **kwargs):  # noqa: E501
        """Returns homologs for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_homolog_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default)
        :param str homology_type: P (paralog), O (Ortholog) or LDO (least-diverged ortholog)
        :param bool direct_taxon: Set true to exclude inferred taxa
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_homolog_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_homolog_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_homolog_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns homologs for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_homolog_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: Taxon CURIE of homolog, e.g. NCBITaxon:9606 (Can be an ancestral node in the ontology; includes inferred associations by default)
        :param str homology_type: P (paralog), O (Ortholog) or LDO (least-diverged ortholog)
        :param bool direct_taxon: Set true to exclude inferred taxa
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'homology_type', 'direct_taxon']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_homolog_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_homolog_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'homology_type' in params:
            query_params.append(('homology_type', params['homology_type']))  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/homologs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_interactions(self, id, **kwargs):  # noqa: E501
        """Returns interactions for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_interactions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_interactions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_interactions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_interactions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns interactions for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_interactions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_interactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_interactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/interactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_model_associations(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_model_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:17988 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_model_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_model_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_model_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_model_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:17988 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_model_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_model_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_ortholog_disease_associations(self, id, **kwargs):  # noqa: E501
        """Return diseases associated with orthologs of a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_ortholog_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_ortholog_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_ortholog_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_ortholog_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return diseases associated with orthologs of a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_ortholog_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_ortholog_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_ortholog_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/ortholog/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_ortholog_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Return phenotypes associated with orthologs for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_ortholog_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_ortholog_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_ortholog_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_ortholog_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return phenotypes associated with orthologs for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_ortholog_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_ortholog_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_ortholog_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/ortholog/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_pathway_associations(self, id, **kwargs):  # noqa: E501
        """Returns pathways associated with gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_pathway_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_pathway_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_pathway_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_pathway_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns pathways associated with gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_pathway_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:50846. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_pathway_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_pathway_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/pathways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. NCBIGene:4750 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gene_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. HGNC:10896 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gene_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gene_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gene_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gene_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of gene, e.g. HGNC:10896 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gene_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gene_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/gene/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generic_associations(self, id, **kwargs):  # noqa: E501
        """Returns associations for an entity regardless of the type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generic_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_generic_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_generic_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns associations for an entity regardless of the type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generic_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_generic_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/{id}/associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generic_object(self, id, **kwargs):  # noqa: E501
        """Returns basic info on object of any type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_object(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:84570 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: BioObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generic_object_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_generic_object_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_generic_object_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns basic info on object of any type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_object_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id, e.g. NCBIGene:84570 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: BioObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generic_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_generic_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BioObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generic_object_by_type(self, type, id, **kwargs):  # noqa: E501
        """Return basic info on an object for a given type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_object_by_type(type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: bioentity type (required)
        :param str id: id, e.g. NCBIGene:84570 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param bool get_association_counts: Get association counts
        :param bool distinct_counts: Get distinct counts for associations (to be used in conjunction with 'get_association_counts' parameter)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generic_object_by_type_with_http_info(type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_generic_object_by_type_with_http_info(type, id, **kwargs)  # noqa: E501
            return data

    def get_generic_object_by_type_with_http_info(self, type, id, **kwargs):  # noqa: E501
        """Return basic info on an object for a given type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_object_by_type_with_http_info(type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: bioentity type (required)
        :param str id: id, e.g. NCBIGene:84570 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param bool get_association_counts: Get association counts
        :param bool distinct_counts: Get distinct counts for associations (to be used in conjunction with 'get_association_counts' parameter)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'get_association_counts', 'distinct_counts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generic_object_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_generic_object_by_type`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_generic_object_by_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'get_association_counts' in params:
            query_params.append(('get_association_counts', params['get_association_counts']))  # noqa: E501
        if 'distinct_counts' in params:
            query_params.append(('distinct_counts', params['distinct_counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/{type}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_case_associations(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_case_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_case_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_case_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_case_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_case_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. dbSNPIndividual:10440, dbSNPIndividual:22633 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_case_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_case_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. dbSNPIndividual:11441 (if non-human will return models) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes-genotype associations  # noqa: E501

        Genotypes may be related to one another according to the GENO model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes-genotype associations  # noqa: E501

        Genotypes may be related to one another according to the GENO model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_model_associations(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_model_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_model_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_model_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_model_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_model_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_model_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_model_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-4286 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a genotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. ZFIN:ZDB-FISH-150901-6607 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genotype_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes-variant associations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. MONARCH:FBgeno422705 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_genotype_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_genotype_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_genotype_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes-variant associations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_genotype_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of genotype, e.g. MONARCH:FBgeno422705 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genotype_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_genotype_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/genotype/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_goterm_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns associations to GO terms for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_goterm_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param str relationship_type: relationship type ('involved_in', 'involved_in_regulation_of' or 'acts_upstream_of_or_within')
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_goterm_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_goterm_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_goterm_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns associations to GO terms for a gene  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_goterm_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0044598 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param str relationship_type: relationship type ('involved_in', 'involved_in_regulation_of' or 'acts_upstream_of_or_within')
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'relationship_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_goterm_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_goterm_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'relationship_type' in params:
            query_params.append(('relationship_type', params['relationship_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/goterm/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_case_associations(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_case_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_case_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_case_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_case_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_case_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. Coriell:GM22295, Coriell:HG02187 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_case_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_case_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MGI:5573196 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MGI:5573196 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MMRRC:042787 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MMRRC:042787 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. Coriell:NA16660 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. Coriell:NA16660 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MGI:5644542 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MGI:5644542 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MMRRC:042787 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_model_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a model, e.g. MMRRC:042787 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_model_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/model/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pathway_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a pathway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pathway_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pathway_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pathway_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_pathway_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a pathway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pathway_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pathway_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_pathway_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/pathway/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pathway_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a pathway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pathway_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pathway_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pathway_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_pathway_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a pathway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pathway_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pathway_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_pathway_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/pathway/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pathway_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a pathway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pathway_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pathway_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pathway_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_pathway_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a pathway  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pathway_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE any pathway element. E.g. REACT:R-HSA-5387390 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pathway_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_pathway_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/pathway/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_anatomy_associations(self, id, **kwargs):  # noqa: E501
        """Returns anatomical entities associated with a phenotype  # noqa: E501

        Example IDs:   * MP:0008521 abnormal Bowman membrane  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_anatomy_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: list[NamedObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_anatomy_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_anatomy_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_anatomy_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns anatomical entities associated with a phenotype  # noqa: E501

        Example IDs:   * MP:0008521 abnormal Bowman membrane  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_anatomy_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of phenotype, e.g. MP:0008521. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: list[NamedObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_anatomy_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_anatomy_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/anatomy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NamedObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_case_associations(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_case_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_case_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_case_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_case_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_case_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  HP:0011951 (Aspiration pneumonia), HP:0002450 (Abnormal motor neuron morphology) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_case_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_case_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: D2PAssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of phenotype, e.g. HP:0007359. Equivalent IDs can be used with same results (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: D2PAssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='D2PAssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level),  (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level),  (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_gene_by_taxon_associations(self, taxid, id, **kwargs):  # noqa: E501
        """Returns gene IDs for all genes associated with a given phenotype, filtered by taxon  # noqa: E501

        For example, MP:0001569 + NCBITaxon:10090 (mouse)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_gene_by_taxon_associations(taxid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxid: Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
        :param str id: Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_gene_by_taxon_associations_with_http_info(taxid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_gene_by_taxon_associations_with_http_info(taxid, id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_gene_by_taxon_associations_with_http_info(self, taxid, id, **kwargs):  # noqa: E501
        """Returns gene IDs for all genes associated with a given phenotype, filtered by taxon  # noqa: E501

        For example, MP:0001569 + NCBITaxon:10090 (mouse)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_gene_by_taxon_associations_with_http_info(taxid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str taxid: Species or high level taxon grouping, e.g  NCBITaxon:10090 (Mus musculus) (required)
        :param str id: Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['taxid', 'id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_gene_by_taxon_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'taxid' is set
        if ('taxid' not in params or
                params['taxid'] is None):
            raise ValueError("Missing the required parameter `taxid` when calling `get_phenotype_gene_by_taxon_associations`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_gene_by_taxon_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'taxid' in params:
            path_params['taxid'] = params['taxid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/gene/{taxid}/ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_pathway_associations(self, id, **kwargs):  # noqa: E501
        """Returns pathways associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_pathway_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_pathway_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_pathway_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_pathway_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns pathways associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_pathway_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_pathway_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_pathway_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/pathways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phenotype_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phenotype_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phenotype_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_phenotype_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a phenotype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phenotype_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Pheno class CURIE identifier, e.g  WBPhenotype:0000180 (axon morphology variant), MP:0001569 (abnormal circulating bilirubin level) (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phenotype_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_phenotype_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/phenotype/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_publication_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_publication_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_publication_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_publication_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_publication_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_publication_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/publication/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_publication_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_publication_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_publication_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_publication_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_publication_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_publication_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/publication/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_publication_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_publication_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_publication_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_publication_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_publication_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_publication_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/publication/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_publication_model_associations(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_model_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_publication_model_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_publication_model_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_publication_model_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_model_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_publication_model_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_publication_model_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/publication/{id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_publication_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_publication_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_publication_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_publication_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_publication_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_publication_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/publication/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_publication_variant_associations(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_variant_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_publication_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_publication_variant_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_publication_variant_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns variants associated with a publication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_publication_variant_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier for a publication, e.g. PMID:11751940 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_publication_variant_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_publication_variant_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/publication/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_substance_participant_in_associations(self, id, **kwargs):  # noqa: E501
        """Returns associations between an activity and process and the specified substance  # noqa: E501

        Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_substance_participant_in_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of substance, e.g. CHEBI:40036 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: list[Association]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_substance_participant_in_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_substance_participant_in_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_substance_participant_in_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns associations between an activity and process and the specified substance  # noqa: E501

        Examples relationships:   * substance is a metabolite of a process  * substance is synthesized by a process  * substance is modified by an activity  * substance elicits a response program/pathway  * substance is transported by activity or pathway  For example, CHEBI:40036 (amitrole)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_substance_participant_in_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of substance, e.g. CHEBI:40036 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: list[Association]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_substance_participant_in_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_substance_participant_in_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/substance/{id}/participant_in', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Association]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_substance_role_associations(self, id, **kwargs):  # noqa: E501
        """Returns associations between given drug and roles  # noqa: E501

        Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_substance_role_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of substance, e.g. CHEBI:40036 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: list[Association]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_substance_role_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_substance_role_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_substance_role_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns associations between given drug and roles  # noqa: E501

        Roles may be human-oriented (e.g. pesticide) or molecular (e.g. enzyme inhibitor)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_substance_role_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of substance, e.g. CHEBI:40036 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: list[Association]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_substance_role_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_substance_role_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/substance/{id}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Association]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_substance_treats_associations(self, id, **kwargs):  # noqa: E501
        """Returns substances associated with a disease  # noqa: E501

        e.g. drugs or small molecules used to treat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_substance_treats_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of substance, e.g. CHEBI:40036 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_substance_treats_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_substance_treats_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_substance_treats_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns substances associated with a disease  # noqa: E501

        e.g. drugs or small molecules used to treat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_substance_treats_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of substance, e.g. CHEBI:40036 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_substance_treats_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_substance_treats_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/substance/{id}/treats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_case_associations(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_case_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_case_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_case_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_case_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns cases associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_case_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. OMIM:309550.0004, dbSNP:rs5030868 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_case_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_case_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_disease_associations(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_disease_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ClinVarVariant:14925 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_disease_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_disease_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns diseases associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_disease_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ClinVarVariant:14925 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_disease_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_disease_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/diseases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_gene_associations(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_gene_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_gene_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_gene_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genes associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_gene_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_gene_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_gene_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/genes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_genotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_genotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_genotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_genotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns genotypes associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_genotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_genotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_genotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/genotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_model_associations(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_model_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_model_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_model_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_model_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns models associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_model_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. OMIM:607623.0012, dbSNP:rs5030868 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_model_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_model_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_phenotype_associations(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_phenotype_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_phenotype_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_phenotype_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns phenotypes associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_phenotype_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_phenotype_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_phenotype_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/phenotypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variant_publication_associations(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_publication_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variant_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variant_publication_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_variant_publication_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns publications associated with a variant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variant_publication_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of variant, e.g. ZFIN:ZDB-ALT-010427-8, ClinVarVariant:39783 (required)
        :param int rows: number of rows
        :param int start: beginning row
        :param bool facet: Enable faceting
        :param list[str] facet_fields: Fields to facet on
        :param bool unselect_evidence: If true, excludes evidence objects in response
        :param bool exclude_automatic_assertions: If true, excludes associations that involve IEAs (ECO:0000501)
        :param bool fetch_objects: If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
        :param bool use_compact_associations: If true, returns results in compact associations format
        :param list[str] slim: Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
        :param str evidence: Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
        :param bool direct: Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
        :param list[str] taxon: One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
        :param bool direct_taxon: Set true to exclude inferred taxa
        :param str relation: A relation CURIE to filter associations
        :param str sort: Sorting responses <field> <desc,asc>
        :param str q: Query string to filter documents
        :return: AssociationResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'rows', 'start', 'facet', 'facet_fields', 'unselect_evidence', 'exclude_automatic_assertions', 'fetch_objects', 'use_compact_associations', 'slim', 'evidence', 'direct', 'taxon', 'direct_taxon', 'relation', 'sort', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant_publication_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_variant_publication_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facet' in params:
            query_params.append(('facet', params['facet']))  # noqa: E501
        if 'facet_fields' in params:
            query_params.append(('facet_fields', params['facet_fields']))  # noqa: E501
            collection_formats['facet_fields'] = 'multi'  # noqa: E501
        if 'unselect_evidence' in params:
            query_params.append(('unselect_evidence', params['unselect_evidence']))  # noqa: E501
        if 'exclude_automatic_assertions' in params:
            query_params.append(('exclude_automatic_assertions', params['exclude_automatic_assertions']))  # noqa: E501
        if 'fetch_objects' in params:
            query_params.append(('fetch_objects', params['fetch_objects']))  # noqa: E501
        if 'use_compact_associations' in params:
            query_params.append(('use_compact_associations', params['use_compact_associations']))  # noqa: E501
        if 'slim' in params:
            query_params.append(('slim', params['slim']))  # noqa: E501
            collection_formats['slim'] = 'multi'  # noqa: E501
        if 'evidence' in params:
            query_params.append(('evidence', params['evidence']))  # noqa: E501
        if 'direct' in params:
            query_params.append(('direct', params['direct']))  # noqa: E501
        if 'taxon' in params:
            query_params.append(('taxon', params['taxon']))  # noqa: E501
            collection_formats['taxon'] = 'multi'  # noqa: E501
        if 'direct_taxon' in params:
            query_params.append(('direct_taxon', params['direct_taxon']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bioentity/variant/{id}/publications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociationResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
