# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OntologyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ontology_subset(self, id, **kwargs):  # noqa: E501
        """Returns meta data of an ontology subset (slim)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_subset(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: name of a slim subset, e.g. goslim_agr, goslim_generic (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_subset_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_subset_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ontology_subset_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns meta data of an ontology subset (slim)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_subset_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: name of a slim subset, e.g. goslim_agr, goslim_generic (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_subset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ontology_subset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/subset/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_term(self, id, **kwargs):  # noqa: E501
        """Returns meta data of an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0003677 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_term_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_term_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ontology_term_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns meta data of an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0003677 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ontology_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/term/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_term_graph(self, id, **kwargs):  # noqa: E501
        """Returns graph of an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_graph(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0000981 (required)
        :param str graph_type: graph type ('topology_graph', 'regulates_transitivity_graph' or 'neighborhood_graph')
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_term_graph_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_term_graph_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ontology_term_graph_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns graph of an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_graph_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0000981 (required)
        :param str graph_type: graph type ('topology_graph', 'regulates_transitivity_graph' or 'neighborhood_graph')
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'graph_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_term_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ontology_term_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'graph_type' in params:
            query_params.append(('graph_type', params['graph_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/term/{id}/graph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_term_subgraph(self, id, **kwargs):  # noqa: E501
        """Extract a subgraph from an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_subgraph(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0007275 (required)
        :param list[str] cnode: Additional classes
        :param bool include_ancestors: Include Ancestors
        :param bool include_descendants: Include Descendants
        :param list[str] relation: Additional classes
        :param bool include_meta: Include metadata in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_term_subgraph_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_term_subgraph_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ontology_term_subgraph_with_http_info(self, id, **kwargs):  # noqa: E501
        """Extract a subgraph from an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_subgraph_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0007275 (required)
        :param list[str] cnode: Additional classes
        :param bool include_ancestors: Include Ancestors
        :param bool include_descendants: Include Descendants
        :param list[str] relation: Additional classes
        :param bool include_meta: Include metadata in response
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cnode', 'include_ancestors', 'include_descendants', 'relation', 'include_meta']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_term_subgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ontology_term_subgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cnode' in params:
            query_params.append(('cnode', params['cnode']))  # noqa: E501
            collection_formats['cnode'] = 'multi'  # noqa: E501
        if 'include_ancestors' in params:
            query_params.append(('include_ancestors', params['include_ancestors']))  # noqa: E501
        if 'include_descendants' in params:
            query_params.append(('include_descendants', params['include_descendants']))  # noqa: E501
        if 'relation' in params:
            query_params.append(('relation', params['relation']))  # noqa: E501
            collection_formats['relation'] = 'multi'  # noqa: E501
        if 'include_meta' in params:
            query_params.append(('include_meta', params['include_meta']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/term/{id}/subgraph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_term_subsets(self, id, **kwargs):  # noqa: E501
        """Returns subsets (slims) associated to an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_subsets(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0006259 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_term_subsets_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_term_subsets_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_ontology_term_subsets_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns subsets (slims) associated to an ontology term  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_term_subsets_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: CURIE identifier of a GO term, e.g. GO:0006259 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_term_subsets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_ontology_term_subsets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/term/{id}/subsets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_terms_shared_ancestor(self, subject, object, **kwargs):  # noqa: E501
        """Returns the ancestor ontology terms shared by two ontology terms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_terms_shared_ancestor(subject, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: CURIE identifier of a GO term, e.g. GO:0006259 (required)
        :param str object: CURIE identifier of a GO term, e.g. GO:0046483 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_terms_shared_ancestor_with_http_info(subject, object, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_terms_shared_ancestor_with_http_info(subject, object, **kwargs)  # noqa: E501
            return data

    def get_ontology_terms_shared_ancestor_with_http_info(self, subject, object, **kwargs):  # noqa: E501
        """Returns the ancestor ontology terms shared by two ontology terms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_terms_shared_ancestor_with_http_info(subject, object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: CURIE identifier of a GO term, e.g. GO:0006259 (required)
        :param str object: CURIE identifier of a GO term, e.g. GO:0046483 (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject', 'object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_terms_shared_ancestor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `get_ontology_terms_shared_ancestor`")  # noqa: E501
        # verify the required parameter 'object' is set
        if ('object' not in params or
                params['object'] is None):
            raise ValueError("Missing the required parameter `object` when calling `get_ontology_terms_shared_ancestor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subject' in params:
            path_params['subject'] = params['subject']  # noqa: E501
        if 'object' in params:
            path_params['object'] = params['object']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/shared/{subject}/{object}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
