# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompactAssociationSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'relation': 'str',
        'objects': 'list[str]'
    }

    attribute_map = {
        'subject': 'subject',
        'relation': 'relation',
        'objects': 'objects'
    }

    def __init__(self, subject=None, relation=None, objects=None):  # noqa: E501
        """CompactAssociationSet - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._relation = None
        self._objects = None
        self.discriminator = None
        self.subject = subject
        self.relation = relation
        self.objects = objects

    @property
    def subject(self):
        """Gets the subject of this CompactAssociationSet.  # noqa: E501

        Subject of association (what it is about), e.g. MGI:1201606  # noqa: E501

        :return: The subject of this CompactAssociationSet.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CompactAssociationSet.

        Subject of association (what it is about), e.g. MGI:1201606  # noqa: E501

        :param subject: The subject of this CompactAssociationSet.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def relation(self):
        """Gets the relation of this CompactAssociationSet.  # noqa: E501

        Relationship type connecting subject and object list  # noqa: E501

        :return: The relation of this CompactAssociationSet.  # noqa: E501
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this CompactAssociationSet.

        Relationship type connecting subject and object list  # noqa: E501

        :param relation: The relation of this CompactAssociationSet.  # noqa: E501
        :type: str
        """
        if relation is None:
            raise ValueError("Invalid value for `relation`, must not be `None`")  # noqa: E501

        self._relation = relation

    @property
    def objects(self):
        """Gets the objects of this CompactAssociationSet.  # noqa: E501

        List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)  # noqa: E501

        :return: The objects of this CompactAssociationSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this CompactAssociationSet.

        List of O, for a given (S,R) pair, yielding (S,R,O) triples. E.g. list of MPs for (MGI:nnn, has_phenotype)  # noqa: E501

        :param objects: The objects of this CompactAssociationSet.  # noqa: E501
        :type: list[str]
        """
        if objects is None:
            raise ValueError("Invalid value for `objects`, must not be `None`")  # noqa: E501

        self._objects = objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompactAssociationSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompactAssociationSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
