# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[AllOfSimQueryIdsItems]',
        'negated_ids': 'list[AllOfSimQueryNegatedIdsItems]',
        'unresolved_ids': 'list[str]',
        'target_ids': 'list[list[object]]',
        'reference': 'AllOfSimQueryReference'
    }

    attribute_map = {
        'ids': 'ids',
        'negated_ids': 'negated_ids',
        'unresolved_ids': 'unresolved_ids',
        'target_ids': 'target_ids',
        'reference': 'reference'
    }

    def __init__(self, ids=None, negated_ids=None, unresolved_ids=None, target_ids=None, reference=None):  # noqa: E501
        """SimQuery - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._negated_ids = None
        self._unresolved_ids = None
        self._target_ids = None
        self._reference = None
        self.discriminator = None
        if ids is not None:
            self.ids = ids
        if negated_ids is not None:
            self.negated_ids = negated_ids
        if unresolved_ids is not None:
            self.unresolved_ids = unresolved_ids
        if target_ids is not None:
            self.target_ids = target_ids
        if reference is not None:
            self.reference = reference

    @property
    def ids(self):
        """Gets the ids of this SimQuery.  # noqa: E501


        :return: The ids of this SimQuery.  # noqa: E501
        :rtype: list[AllOfSimQueryIdsItems]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this SimQuery.


        :param ids: The ids of this SimQuery.  # noqa: E501
        :type: list[AllOfSimQueryIdsItems]
        """

        self._ids = ids

    @property
    def negated_ids(self):
        """Gets the negated_ids of this SimQuery.  # noqa: E501


        :return: The negated_ids of this SimQuery.  # noqa: E501
        :rtype: list[AllOfSimQueryNegatedIdsItems]
        """
        return self._negated_ids

    @negated_ids.setter
    def negated_ids(self, negated_ids):
        """Sets the negated_ids of this SimQuery.


        :param negated_ids: The negated_ids of this SimQuery.  # noqa: E501
        :type: list[AllOfSimQueryNegatedIdsItems]
        """

        self._negated_ids = negated_ids

    @property
    def unresolved_ids(self):
        """Gets the unresolved_ids of this SimQuery.  # noqa: E501

        list of unresolved ids  # noqa: E501

        :return: The unresolved_ids of this SimQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._unresolved_ids

    @unresolved_ids.setter
    def unresolved_ids(self, unresolved_ids):
        """Sets the unresolved_ids of this SimQuery.

        list of unresolved ids  # noqa: E501

        :param unresolved_ids: The unresolved_ids of this SimQuery.  # noqa: E501
        :type: list[str]
        """

        self._unresolved_ids = unresolved_ids

    @property
    def target_ids(self):
        """Gets the target_ids of this SimQuery.  # noqa: E501


        :return: The target_ids of this SimQuery.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._target_ids

    @target_ids.setter
    def target_ids(self, target_ids):
        """Sets the target_ids of this SimQuery.


        :param target_ids: The target_ids of this SimQuery.  # noqa: E501
        :type: list[list[object]]
        """

        self._target_ids = target_ids

    @property
    def reference(self):
        """Gets the reference of this SimQuery.  # noqa: E501

        reference individual or class (eg gene, disease)  # noqa: E501

        :return: The reference of this SimQuery.  # noqa: E501
        :rtype: AllOfSimQueryReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SimQuery.

        reference individual or class (eg gene, disease)  # noqa: E501

        :param reference: The reference of this SimQuery.  # noqa: E501
        :type: AllOfSimQueryReference
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
