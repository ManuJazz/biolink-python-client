# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.bio_object import BioObject  # noqa: F401,E501

class SequenceFeature(BioObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locations': 'list[SequenceLocation]',
        'seq': 'Seq',
        'homology_associations': 'list[Association]'
    }
    if hasattr(BioObject, "swagger_types"):
        swagger_types.update(BioObject.swagger_types)

    attribute_map = {
        'locations': 'locations',
        'seq': 'seq',
        'homology_associations': 'homology_associations'
    }
    if hasattr(BioObject, "attribute_map"):
        attribute_map.update(BioObject.attribute_map)

    def __init__(self, locations=None, seq=None, homology_associations=None, *args, **kwargs):  # noqa: E501
        """SequenceFeature - a model defined in Swagger"""  # noqa: E501
        self._locations = None
        self._seq = None
        self._homology_associations = None
        self.discriminator = None
        if locations is not None:
            self.locations = locations
        if seq is not None:
            self.seq = seq
        if homology_associations is not None:
            self.homology_associations = homology_associations
        BioObject.__init__(self, *args, **kwargs)

    @property
    def locations(self):
        """Gets the locations of this SequenceFeature.  # noqa: E501


        :return: The locations of this SequenceFeature.  # noqa: E501
        :rtype: list[SequenceLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this SequenceFeature.


        :param locations: The locations of this SequenceFeature.  # noqa: E501
        :type: list[SequenceLocation]
        """

        self._locations = locations

    @property
    def seq(self):
        """Gets the seq of this SequenceFeature.  # noqa: E501


        :return: The seq of this SequenceFeature.  # noqa: E501
        :rtype: Seq
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this SequenceFeature.


        :param seq: The seq of this SequenceFeature.  # noqa: E501
        :type: Seq
        """

        self._seq = seq

    @property
    def homology_associations(self):
        """Gets the homology_associations of this SequenceFeature.  # noqa: E501


        :return: The homology_associations of this SequenceFeature.  # noqa: E501
        :rtype: list[Association]
        """
        return self._homology_associations

    @homology_associations.setter
    def homology_associations(self, homology_associations):
        """Sets the homology_associations of this SequenceFeature.


        :param homology_associations: The homology_associations of this SequenceFeature.  # noqa: E501
        :type: list[Association]
        """

        self._homology_associations = homology_associations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SequenceFeature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequenceFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
