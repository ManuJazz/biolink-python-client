# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.named_object_core import NamedObjectCore  # noqa: F401,E501

class NamedObject(NamedObjectCore):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'types': 'list[str]',
        'synonyms': 'list[SynonymPropertyValue]',
        'deprecated': 'bool',
        'replaced_by': 'list[str]',
        'consider': 'list[str]'
    }
    if hasattr(NamedObjectCore, "swagger_types"):
        swagger_types.update(NamedObjectCore.swagger_types)

    attribute_map = {
        'description': 'description',
        'types': 'types',
        'synonyms': 'synonyms',
        'deprecated': 'deprecated',
        'replaced_by': 'replaced_by',
        'consider': 'consider'
    }
    if hasattr(NamedObjectCore, "attribute_map"):
        attribute_map.update(NamedObjectCore.attribute_map)

    def __init__(self, description=None, types=None, synonyms=None, deprecated=None, replaced_by=None, consider=None, *args, **kwargs):  # noqa: E501
        """NamedObject - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._types = None
        self._synonyms = None
        self._deprecated = None
        self._replaced_by = None
        self._consider = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if types is not None:
            self.types = types
        if synonyms is not None:
            self.synonyms = synonyms
        if deprecated is not None:
            self.deprecated = deprecated
        if replaced_by is not None:
            self.replaced_by = replaced_by
        if consider is not None:
            self.consider = consider
        NamedObjectCore.__init__(self, *args, **kwargs)

    @property
    def description(self):
        """Gets the description of this NamedObject.  # noqa: E501

        Descriptive text for the entity. For ontology classes, this will be a definition.  # noqa: E501

        :return: The description of this NamedObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NamedObject.

        Descriptive text for the entity. For ontology classes, this will be a definition.  # noqa: E501

        :param description: The description of this NamedObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def types(self):
        """Gets the types of this NamedObject.  # noqa: E501


        :return: The types of this NamedObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this NamedObject.


        :param types: The types of this NamedObject.  # noqa: E501
        :type: list[str]
        """

        self._types = types

    @property
    def synonyms(self):
        """Gets the synonyms of this NamedObject.  # noqa: E501

        list of synonyms or alternate labels  # noqa: E501

        :return: The synonyms of this NamedObject.  # noqa: E501
        :rtype: list[SynonymPropertyValue]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this NamedObject.

        list of synonyms or alternate labels  # noqa: E501

        :param synonyms: The synonyms of this NamedObject.  # noqa: E501
        :type: list[SynonymPropertyValue]
        """

        self._synonyms = synonyms

    @property
    def deprecated(self):
        """Gets the deprecated of this NamedObject.  # noqa: E501

        True if the node is deprecated/obsoleted.  # noqa: E501

        :return: The deprecated of this NamedObject.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this NamedObject.

        True if the node is deprecated/obsoleted.  # noqa: E501

        :param deprecated: The deprecated of this NamedObject.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def replaced_by(self):
        """Gets the replaced_by of this NamedObject.  # noqa: E501


        :return: The replaced_by of this NamedObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this NamedObject.


        :param replaced_by: The replaced_by of this NamedObject.  # noqa: E501
        :type: list[str]
        """

        self._replaced_by = replaced_by

    @property
    def consider(self):
        """Gets the consider of this NamedObject.  # noqa: E501


        :return: The consider of this NamedObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._consider

    @consider.setter
    def consider(self, consider):
        """Sets the consider of this NamedObject.


        :param consider: The consider of this NamedObject.  # noqa: E501
        :type: list[str]
        """

        self._consider = consider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamedObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamedObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
