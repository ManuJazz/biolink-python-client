# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_found': 'int',
        'docs': 'list[object]',
        'facet_counts': 'object',
        'highlighting': 'object'
    }

    attribute_map = {
        'num_found': 'numFound',
        'docs': 'docs',
        'facet_counts': 'facet_counts',
        'highlighting': 'highlighting'
    }

    def __init__(self, num_found=None, docs=None, facet_counts=None, highlighting=None):  # noqa: E501
        """SearchResult - a model defined in Swagger"""  # noqa: E501
        self._num_found = None
        self._docs = None
        self._facet_counts = None
        self._highlighting = None
        self.discriminator = None
        if num_found is not None:
            self.num_found = num_found
        if docs is not None:
            self.docs = docs
        if facet_counts is not None:
            self.facet_counts = facet_counts
        if highlighting is not None:
            self.highlighting = highlighting

    @property
    def num_found(self):
        """Gets the num_found of this SearchResult.  # noqa: E501

        total number of associations matching query  # noqa: E501

        :return: The num_found of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this SearchResult.

        total number of associations matching query  # noqa: E501

        :param num_found: The num_found of this SearchResult.  # noqa: E501
        :type: int
        """

        self._num_found = num_found

    @property
    def docs(self):
        """Gets the docs of this SearchResult.  # noqa: E501

        solr docs  # noqa: E501

        :return: The docs of this SearchResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._docs

    @docs.setter
    def docs(self, docs):
        """Sets the docs of this SearchResult.

        solr docs  # noqa: E501

        :param docs: The docs of this SearchResult.  # noqa: E501
        :type: list[object]
        """

        self._docs = docs

    @property
    def facet_counts(self):
        """Gets the facet_counts of this SearchResult.  # noqa: E501

        Mapping between field names and association counts  # noqa: E501

        :return: The facet_counts of this SearchResult.  # noqa: E501
        :rtype: object
        """
        return self._facet_counts

    @facet_counts.setter
    def facet_counts(self, facet_counts):
        """Sets the facet_counts of this SearchResult.

        Mapping between field names and association counts  # noqa: E501

        :param facet_counts: The facet_counts of this SearchResult.  # noqa: E501
        :type: object
        """

        self._facet_counts = facet_counts

    @property
    def highlighting(self):
        """Gets the highlighting of this SearchResult.  # noqa: E501

        Mapping between id and solr highlight  # noqa: E501

        :return: The highlighting of this SearchResult.  # noqa: E501
        :rtype: object
        """
        return self._highlighting

    @highlighting.setter
    def highlighting(self, highlighting):
        """Sets the highlighting of this SearchResult.

        Mapping between id and solr highlight  # noqa: E501

        :param highlighting: The highlighting of this SearchResult.  # noqa: E501
        :type: object
        """

        self._highlighting = highlighting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
