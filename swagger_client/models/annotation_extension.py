# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotationExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relation_chain': 'list[Relation]',
        'filler': 'AllOfAnnotationExtensionFiller'
    }

    attribute_map = {
        'relation_chain': 'relation_chain',
        'filler': 'filler'
    }

    def __init__(self, relation_chain=None, filler=None):  # noqa: E501
        """AnnotationExtension - a model defined in Swagger"""  # noqa: E501
        self._relation_chain = None
        self._filler = None
        self.discriminator = None
        if relation_chain is not None:
            self.relation_chain = relation_chain
        if filler is not None:
            self.filler = filler

    @property
    def relation_chain(self):
        """Gets the relation_chain of this AnnotationExtension.  # noqa: E501

        Relationship type. If more than one value, interpreted as chain  # noqa: E501

        :return: The relation_chain of this AnnotationExtension.  # noqa: E501
        :rtype: list[Relation]
        """
        return self._relation_chain

    @relation_chain.setter
    def relation_chain(self, relation_chain):
        """Sets the relation_chain of this AnnotationExtension.

        Relationship type. If more than one value, interpreted as chain  # noqa: E501

        :param relation_chain: The relation_chain of this AnnotationExtension.  # noqa: E501
        :type: list[Relation]
        """

        self._relation_chain = relation_chain

    @property
    def filler(self):
        """Gets the filler of this AnnotationExtension.  # noqa: E501

        Extension interpreted as OWL expression (r1 some r2 some .. some filler).  # noqa: E501

        :return: The filler of this AnnotationExtension.  # noqa: E501
        :rtype: AllOfAnnotationExtensionFiller
        """
        return self._filler

    @filler.setter
    def filler(self, filler):
        """Sets the filler of this AnnotationExtension.

        Extension interpreted as OWL expression (r1 some r2 some .. some filler).  # noqa: E501

        :param filler: The filler of this AnnotationExtension.  # noqa: E501
        :type: AllOfAnnotationExtensionFiller
        """

        self._filler = filler

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotationExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
