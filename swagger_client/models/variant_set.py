# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VariantSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'body': 'str',
        'pub_date': 'datetime',
        'category_id': 'int',
        'category': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'body': 'body',
        'pub_date': 'pub_date',
        'category_id': 'category_id',
        'category': 'category'
    }

    def __init__(self, id=None, title=None, body=None, pub_date=None, category_id=None, category=None):  # noqa: E501
        """VariantSet - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._body = None
        self._pub_date = None
        self._category_id = None
        self._category = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.title = title
        self.body = body
        if pub_date is not None:
            self.pub_date = pub_date
        if category_id is not None:
            self.category_id = category_id
        if category is not None:
            self.category = category

    @property
    def id(self):
        """Gets the id of this VariantSet.  # noqa: E501

        The unique identifier of a variant set  # noqa: E501

        :return: The id of this VariantSet.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariantSet.

        The unique identifier of a variant set  # noqa: E501

        :param id: The id of this VariantSet.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this VariantSet.  # noqa: E501

        Article title  # noqa: E501

        :return: The title of this VariantSet.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VariantSet.

        Article title  # noqa: E501

        :param title: The title of this VariantSet.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def body(self):
        """Gets the body of this VariantSet.  # noqa: E501

        Article content  # noqa: E501

        :return: The body of this VariantSet.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this VariantSet.

        Article content  # noqa: E501

        :param body: The body of this VariantSet.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def pub_date(self):
        """Gets the pub_date of this VariantSet.  # noqa: E501


        :return: The pub_date of this VariantSet.  # noqa: E501
        :rtype: datetime
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """Sets the pub_date of this VariantSet.


        :param pub_date: The pub_date of this VariantSet.  # noqa: E501
        :type: datetime
        """

        self._pub_date = pub_date

    @property
    def category_id(self):
        """Gets the category_id of this VariantSet.  # noqa: E501


        :return: The category_id of this VariantSet.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this VariantSet.


        :param category_id: The category_id of this VariantSet.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def category(self):
        """Gets the category of this VariantSet.  # noqa: E501


        :return: The category of this VariantSet.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this VariantSet.


        :param category: The category of this VariantSet.  # noqa: E501
        :type: str
        """

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariantSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariantSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
