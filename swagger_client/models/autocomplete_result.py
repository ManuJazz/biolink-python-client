# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutocompleteResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'list[str]',
        'match': 'str',
        'category': 'list[str]',
        'taxon': 'str',
        'taxon_label': 'str',
        'highlight': 'str',
        'has_highlight': 'bool',
        'equivalent_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'match': 'match',
        'category': 'category',
        'taxon': 'taxon',
        'taxon_label': 'taxon_label',
        'highlight': 'highlight',
        'has_highlight': 'has_highlight',
        'equivalent_ids': 'equivalent_ids'
    }

    def __init__(self, id=None, label=None, match=None, category=None, taxon=None, taxon_label=None, highlight=None, has_highlight=None, equivalent_ids=None):  # noqa: E501
        """AutocompleteResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._label = None
        self._match = None
        self._category = None
        self._taxon = None
        self._taxon_label = None
        self._highlight = None
        self._has_highlight = None
        self._equivalent_ids = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if match is not None:
            self.match = match
        if category is not None:
            self.category = category
        if taxon is not None:
            self.taxon = taxon
        if taxon_label is not None:
            self.taxon_label = taxon_label
        if highlight is not None:
            self.highlight = highlight
        if has_highlight is not None:
            self.has_highlight = has_highlight
        if equivalent_ids is not None:
            self.equivalent_ids = equivalent_ids

    @property
    def id(self):
        """Gets the id of this AutocompleteResult.  # noqa: E501

        curie formatted id  # noqa: E501

        :return: The id of this AutocompleteResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutocompleteResult.

        curie formatted id  # noqa: E501

        :param id: The id of this AutocompleteResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AutocompleteResult.  # noqa: E501

        primary label (rdfs:label)  # noqa: E501

        :return: The label of this AutocompleteResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AutocompleteResult.

        primary label (rdfs:label)  # noqa: E501

        :param label: The label of this AutocompleteResult.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def match(self):
        """Gets the match of this AutocompleteResult.  # noqa: E501

        matched part of document (may be primary label, synonym, id, etc)  # noqa: E501

        :return: The match of this AutocompleteResult.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this AutocompleteResult.

        matched part of document (may be primary label, synonym, id, etc)  # noqa: E501

        :param match: The match of this AutocompleteResult.  # noqa: E501
        :type: str
        """

        self._match = match

    @property
    def category(self):
        """Gets the category of this AutocompleteResult.  # noqa: E501

        node categories  # noqa: E501

        :return: The category of this AutocompleteResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AutocompleteResult.

        node categories  # noqa: E501

        :param category: The category of this AutocompleteResult.  # noqa: E501
        :type: list[str]
        """

        self._category = category

    @property
    def taxon(self):
        """Gets the taxon of this AutocompleteResult.  # noqa: E501

        taxon as NCBITaxon curie  # noqa: E501

        :return: The taxon of this AutocompleteResult.  # noqa: E501
        :rtype: str
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this AutocompleteResult.

        taxon as NCBITaxon curie  # noqa: E501

        :param taxon: The taxon of this AutocompleteResult.  # noqa: E501
        :type: str
        """

        self._taxon = taxon

    @property
    def taxon_label(self):
        """Gets the taxon_label of this AutocompleteResult.  # noqa: E501

        taxon label  # noqa: E501

        :return: The taxon_label of this AutocompleteResult.  # noqa: E501
        :rtype: str
        """
        return self._taxon_label

    @taxon_label.setter
    def taxon_label(self, taxon_label):
        """Sets the taxon_label of this AutocompleteResult.

        taxon label  # noqa: E501

        :param taxon_label: The taxon_label of this AutocompleteResult.  # noqa: E501
        :type: str
        """

        self._taxon_label = taxon_label

    @property
    def highlight(self):
        """Gets the highlight of this AutocompleteResult.  # noqa: E501

        solr highlight  # noqa: E501

        :return: The highlight of this AutocompleteResult.  # noqa: E501
        :rtype: str
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this AutocompleteResult.

        solr highlight  # noqa: E501

        :param highlight: The highlight of this AutocompleteResult.  # noqa: E501
        :type: str
        """

        self._highlight = highlight

    @property
    def has_highlight(self):
        """Gets the has_highlight of this AutocompleteResult.  # noqa: E501

        True if highlight can be interpreted as html, else False  # noqa: E501

        :return: The has_highlight of this AutocompleteResult.  # noqa: E501
        :rtype: bool
        """
        return self._has_highlight

    @has_highlight.setter
    def has_highlight(self, has_highlight):
        """Sets the has_highlight of this AutocompleteResult.

        True if highlight can be interpreted as html, else False  # noqa: E501

        :param has_highlight: The has_highlight of this AutocompleteResult.  # noqa: E501
        :type: bool
        """

        self._has_highlight = has_highlight

    @property
    def equivalent_ids(self):
        """Gets the equivalent_ids of this AutocompleteResult.  # noqa: E501

        Equivalent IDs  # noqa: E501

        :return: The equivalent_ids of this AutocompleteResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._equivalent_ids

    @equivalent_ids.setter
    def equivalent_ids(self, equivalent_ids):
        """Sets the equivalent_ids of this AutocompleteResult.

        Equivalent IDs  # noqa: E501

        :param equivalent_ids: The equivalent_ids of this AutocompleteResult.  # noqa: E501
        :type: list[str]
        """

        self._equivalent_ids = equivalent_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutocompleteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutocompleteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
