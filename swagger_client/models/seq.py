# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.bio_object import BioObject  # noqa: F401,E501

class Seq(BioObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alphabet': 'str',
        'residues': 'str',
        'md5checksum': 'str',
        'seqlen': 'str'
    }
    if hasattr(BioObject, "swagger_types"):
        swagger_types.update(BioObject.swagger_types)

    attribute_map = {
        'alphabet': 'alphabet',
        'residues': 'residues',
        'md5checksum': 'md5checksum',
        'seqlen': 'seqlen'
    }
    if hasattr(BioObject, "attribute_map"):
        attribute_map.update(BioObject.attribute_map)

    def __init__(self, alphabet=None, residues=None, md5checksum=None, seqlen=None, *args, **kwargs):  # noqa: E501
        """Seq - a model defined in Swagger"""  # noqa: E501
        self._alphabet = None
        self._residues = None
        self._md5checksum = None
        self._seqlen = None
        self.discriminator = None
        if alphabet is not None:
            self.alphabet = alphabet
        if residues is not None:
            self.residues = residues
        if md5checksum is not None:
            self.md5checksum = md5checksum
        if seqlen is not None:
            self.seqlen = seqlen
        BioObject.__init__(self, *args, **kwargs)

    @property
    def alphabet(self):
        """Gets the alphabet of this Seq.  # noqa: E501

        one of: DNA, RNA or AA  # noqa: E501

        :return: The alphabet of this Seq.  # noqa: E501
        :rtype: str
        """
        return self._alphabet

    @alphabet.setter
    def alphabet(self, alphabet):
        """Sets the alphabet of this Seq.

        one of: DNA, RNA or AA  # noqa: E501

        :param alphabet: The alphabet of this Seq.  # noqa: E501
        :type: str
        """

        self._alphabet = alphabet

    @property
    def residues(self):
        """Gets the residues of this Seq.  # noqa: E501

        string representing sequence of residues  # noqa: E501

        :return: The residues of this Seq.  # noqa: E501
        :rtype: str
        """
        return self._residues

    @residues.setter
    def residues(self, residues):
        """Sets the residues of this Seq.

        string representing sequence of residues  # noqa: E501

        :param residues: The residues of this Seq.  # noqa: E501
        :type: str
        """

        self._residues = residues

    @property
    def md5checksum(self):
        """Gets the md5checksum of this Seq.  # noqa: E501

        checksum  # noqa: E501

        :return: The md5checksum of this Seq.  # noqa: E501
        :rtype: str
        """
        return self._md5checksum

    @md5checksum.setter
    def md5checksum(self, md5checksum):
        """Sets the md5checksum of this Seq.

        checksum  # noqa: E501

        :param md5checksum: The md5checksum of this Seq.  # noqa: E501
        :type: str
        """

        self._md5checksum = md5checksum

    @property
    def seqlen(self):
        """Gets the seqlen of this Seq.  # noqa: E501

        length of sequence  # noqa: E501

        :return: The seqlen of this Seq.  # noqa: E501
        :rtype: str
        """
        return self._seqlen

    @seqlen.setter
    def seqlen(self, seqlen):
        """Sets the seqlen of this Seq.

        length of sequence  # noqa: E501

        :param seqlen: The seqlen of this Seq.  # noqa: E501
        :type: str
        """

        self._seqlen = seqlen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Seq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Seq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
