# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.typed_node import TypedNode  # noqa: F401,E501

class SimMatch(TypedNode):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rank': 'str',
        'score': 'float',
        'significance': 'str',
        'pairwise_match': 'list[object]'
    }
    if hasattr(TypedNode, "swagger_types"):
        swagger_types.update(TypedNode.swagger_types)

    attribute_map = {
        'rank': 'rank',
        'score': 'score',
        'significance': 'significance',
        'pairwise_match': 'pairwise_match'
    }
    if hasattr(TypedNode, "attribute_map"):
        attribute_map.update(TypedNode.attribute_map)

    def __init__(self, rank=None, score=None, significance=None, pairwise_match=None, *args, **kwargs):  # noqa: E501
        """SimMatch - a model defined in Swagger"""  # noqa: E501
        self._rank = None
        self._score = None
        self._significance = None
        self._pairwise_match = None
        self.discriminator = None
        if rank is not None:
            self.rank = rank
        if score is not None:
            self.score = score
        if significance is not None:
            self.significance = significance
        if pairwise_match is not None:
            self.pairwise_match = pairwise_match
        TypedNode.__init__(self, *args, **kwargs)

    @property
    def rank(self):
        """Gets the rank of this SimMatch.  # noqa: E501

        rank  # noqa: E501

        :return: The rank of this SimMatch.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this SimMatch.

        rank  # noqa: E501

        :param rank: The rank of this SimMatch.  # noqa: E501
        :type: str
        """

        self._rank = rank

    @property
    def score(self):
        """Gets the score of this SimMatch.  # noqa: E501

        sim score  # noqa: E501

        :return: The score of this SimMatch.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SimMatch.

        sim score  # noqa: E501

        :param score: The score of this SimMatch.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def significance(self):
        """Gets the significance of this SimMatch.  # noqa: E501

        p-value  # noqa: E501

        :return: The significance of this SimMatch.  # noqa: E501
        :rtype: str
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this SimMatch.

        p-value  # noqa: E501

        :param significance: The significance of this SimMatch.  # noqa: E501
        :type: str
        """

        self._significance = significance

    @property
    def pairwise_match(self):
        """Gets the pairwise_match of this SimMatch.  # noqa: E501


        :return: The pairwise_match of this SimMatch.  # noqa: E501
        :rtype: list[object]
        """
        return self._pairwise_match

    @pairwise_match.setter
    def pairwise_match(self, pairwise_match):
        """Sets the pairwise_match of this SimMatch.


        :param pairwise_match: The pairwise_match of this SimMatch.  # noqa: E501
        :type: list[object]
        """

        self._pairwise_match = pairwise_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
