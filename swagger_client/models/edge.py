# coding: utf-8

"""
    BioLink API

    API integration layer for linked biological objects.   __Source:__ https://github.com/biolink/biolink-api/  # noqa: E501

    OpenAPI spec version: 1.1.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Edge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub': 'str',
        'pred': 'str',
        'obj': 'str',
        'meta': 'object'
    }

    attribute_map = {
        'sub': 'sub',
        'pred': 'pred',
        'obj': 'obj',
        'meta': 'meta'
    }

    def __init__(self, sub=None, pred=None, obj=None, meta=None):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501
        self._sub = None
        self._pred = None
        self._obj = None
        self._meta = None
        self.discriminator = None
        if sub is not None:
            self.sub = sub
        if pred is not None:
            self.pred = pred
        if obj is not None:
            self.obj = obj
        if meta is not None:
            self.meta = meta

    @property
    def sub(self):
        """Gets the sub of this Edge.  # noqa: E501

        Subject (source) Node ID  # noqa: E501

        :return: The sub of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this Edge.

        Subject (source) Node ID  # noqa: E501

        :param sub: The sub of this Edge.  # noqa: E501
        :type: str
        """

        self._sub = sub

    @property
    def pred(self):
        """Gets the pred of this Edge.  # noqa: E501

        Predicate (relation) ID  # noqa: E501

        :return: The pred of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._pred

    @pred.setter
    def pred(self, pred):
        """Sets the pred of this Edge.

        Predicate (relation) ID  # noqa: E501

        :param pred: The pred of this Edge.  # noqa: E501
        :type: str
        """

        self._pred = pred

    @property
    def obj(self):
        """Gets the obj of this Edge.  # noqa: E501

        Object (target) Node ID  # noqa: E501

        :return: The obj of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._obj

    @obj.setter
    def obj(self, obj):
        """Sets the obj of this Edge.

        Object (target) Node ID  # noqa: E501

        :param obj: The obj of this Edge.  # noqa: E501
        :type: str
        """

        self._obj = obj

    @property
    def meta(self):
        """Gets the meta of this Edge.  # noqa: E501

        metadata about the Edge  # noqa: E501

        :return: The meta of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Edge.

        metadata about the Edge  # noqa: E501

        :param meta: The meta of this Edge.  # noqa: E501
        :type: object
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Edge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
